import React, { useEffect, useRef, useState } from 'react'
import { ImageTileSS } from 'src/components/Dashboard/imageTIleSS'
import { LinkTileSS } from 'src/components/Dashboard/linkTileSS'
import { PreviewerDS } from 'src/components/Dashboard/previewerDS'
import { SequenceTileSS } from 'src/components/Dashboard/sequenceTileSS'
import { VideoTileSS } from 'src/components/Dashboard/videoTileSS'
import { ComputerIcon } from 'src/components/icons/computer_icon'
import { DropdownIcon } from 'src/components/icons/drop_down-icon'
import { ExclamationIcon } from 'src/components/icons/exclamation_icon'
import { ImageIcon } from 'src/components/icons/image_icon'
import {
	MediaImageData,
	MediaLinkData,
	MediaVideoData,
	ScreenSaverConfig,
	SettingsAction,
} from 'src/interfaces'

interface ScreenSaverAccordionProps {
	imageList: MediaImageData[]
	linkList: MediaLinkData[]
	videoList: MediaVideoData[]
	state: ScreenSaverConfig
	dispatch: React.Dispatch<SettingsAction>
}

export const ScreenSaverAccordion = ({
	imageList,
	linkList,
	videoList,
	state,
	dispatch,
}: ScreenSaverAccordionProps) => {
	const [opened, setOpened] = useState(false)
	const [display, setDisplay] = useState<'display1' | 'display2'>('display1')
	const sequenceSectionRef = useRef<HTMLDivElement>(null)

	const [defaultScreenSaver, setDefaultScreenSaver] = useState<{
		fileSize: number
		fileName: string
		fileUrl: string
		fileType: 'im' | 'vd' | 'lk'
	}>({
		fileSize: 1,
		fileName: '1',
		fileUrl: '',
		fileType: 'im',
	})

	const [sequenceScreenSavers, setSequenceScreenSavers] = useState<
		{
			fileSize: number
			fileName: string
			fileUrl: string
			fileType: 'im' | 'vd' | 'lk'
			startTime: string
			endTime: string
		}[]
	>([])

	const [
		{ availSSPreviewPopupState, availSSPreviewIndex, availSSPImagePreviewer },
		setAvailSSPPreviewState,
	] = useState<{
		availSSPreviewPopupState: boolean
		availSSPreviewIndex: number
		availSSPImagePreviewer: boolean
	}>({
		availSSPreviewPopupState: false,
		availSSPreviewIndex: 0,
		availSSPImagePreviewer: false,
	})

	const [
		{
			defaultSSPreviewPopupState,
			defaultSSPreviewIndex,
			defaultSSPImagePreviewer,
		},
		setDefaultSSPPreviewState,
	] = useState<{
		defaultSSPreviewPopupState: boolean
		defaultSSPreviewIndex: number
		defaultSSPImagePreviewer: boolean
	}>({
		defaultSSPreviewPopupState: false,
		defaultSSPreviewIndex: 0,
		defaultSSPImagePreviewer: false,
	})

	const handleOnDrag = (
		e: React.DragEvent,
		url: string,
		fileName: string,
		fileType: 'im' | 'lk' | 'vd',
	) => {
		e.dataTransfer.setData('fileUrl', url)
		e.dataTransfer.setData('fileName', fileName)
		e.dataTransfer.setData('fileType', fileType)
	}

	const handleOnDropDefault = (e: React.DragEvent) => {
		const url = e.dataTransfer.getData('fileUrl') as string
		const fileName = e.dataTransfer.getData('fileName') as string
		const fileType = e.dataTransfer.getData('fileType') as 'im' | 'vd' | 'lk'
		setDefaultScreenSaver((prevState) => ({
			...prevState,
			fileName: fileName,
			fileUrl: url,
			fileType: fileType,
		}))
		if (display === 'display1') {
			dispatch({
				type: 'UPDATE_SCREEN_SAVER',
				payload: {
					defaultDisplay1: {
						mediaName: fileName,
						mediaType: fileType,
						mediaUrl: url,
					},
				},
			})
		} else if (display === 'display2') {
			dispatch({
				type: 'UPDATE_SCREEN_SAVER',
				payload: {
					defaultDisplay2: {
						mediaName: fileName,
						mediaType: fileType,
						mediaUrl: url,
					},
				},
			})
		}
	}

	const handleOnDropSequence = (e: React.DragEvent) => {
		const url = e.dataTransfer.getData('fileUrl') as string
		const fileName = e.dataTransfer.getData('fileName') as string
		const fileType = e.dataTransfer.getData('fileType') as 'im' | 'vd' | 'lk'

		const currentDateTime = new Date(
			new Date().getTime() + 5.5 * 60 * 60 * 1000,
		)
		setSequenceScreenSavers((prev) => [
			...prev,
			{
				fileSize: 1,
				fileName: fileName,
				fileUrl: url,
				fileType: fileType,
				startTime: currentDateTime.toISOString(),
				endTime: currentDateTime.toISOString(),
			},
		])
		if (display === 'display1') {
			dispatch({
				type: 'UPDATE_SCREEN_SAVER',
				payload: {
					display1: [
						...(state.display1 || []),
						{
							mediaName: fileName,
							mediaUrl: url,
							mediaType: fileType,
							startTime: currentDateTime.toISOString(),
							endTime: currentDateTime.toISOString(),
						},
					],
				},
			})
		} else if (display === 'display2') {
			dispatch({
				type: 'UPDATE_SCREEN_SAVER',
				payload: {
					display2: [
						...(state.display2 || []),
						{
							mediaName: fileName,
							mediaUrl: url,
							mediaType: fileType,
							startTime: currentDateTime.toISOString(),
							endTime: currentDateTime.toISOString(),
						},
					],
				},
			})
		}
	}

	useEffect(() => {
		if (sequenceSectionRef.current) {
			sequenceSectionRef.current.scrollTo({
				top: sequenceSectionRef.current.scrollHeight,
				behavior: 'smooth',
			})
		}
	}, [sequenceScreenSavers.length])

	useEffect(() => {
		if (state) {
			if (display === 'display1') {
				setDefaultScreenSaver({
					fileSize: 1,
					fileName: state.defaultDisplay1.mediaName,
					fileType: state.defaultDisplay1.mediaType,
					fileUrl: state.defaultDisplay1.mediaUrl || '',
				})
				setSequenceScreenSavers(
					state.display1.map((sequenceSS) => ({
						fileSize: 1,
						fileName: sequenceSS.mediaName,
						fileType: sequenceSS.mediaType,
						startTime: sequenceSS.startTime,
						endTime: sequenceSS.endTime,
						fileUrl: sequenceSS.mediaUrl,
					})),
				)
			} else if (display === 'display2') {
				setDefaultScreenSaver({
					fileSize: 1,
					fileName: state.defaultDisplay2.mediaName,
					fileType: state.defaultDisplay2.mediaType,
					fileUrl: state.defaultDisplay2.mediaUrl || '',
				})
				setSequenceScreenSavers(
					state.display2.map((sequenceSS) => ({
						fileSize: 1,
						fileName: sequenceSS.mediaName,
						fileType: sequenceSS.mediaType,
						startTime: sequenceSS.startTime,
						endTime: sequenceSS.endTime,
						fileUrl: sequenceSS.mediaUrl,
					})),
				)
			}
		}
	}, [state, display])

	const handleDragOver = (e: React.DragEvent) => {
		e.preventDefault()
	}

	const updateSequenceTime = ({
		index,
		newStartTime,
		newEndTime,
	}: {
		index: number
		newStartTime: string
		newEndTime: string
	}) => {
		let newState: {
			fileSize: number
			fileName: string
			fileUrl: string
			fileType: 'im' | 'vd' | 'lk'
			startTime: string
			endTime: string
		}[] = []

		setSequenceScreenSavers((prevState) => {
			newState = [...prevState]
			newState[index] = {
				...(newState[index] as {
					fileSize: number
					fileName: string
					fileUrl: string
					fileType: 'im' | 'vd' | 'lk'
					startTime: string
					endTime: string
				}),
				startTime: newStartTime,
				endTime: newEndTime,
			}
			return newState
		})

		if (display === 'display1') {
			dispatch({
				type: 'UPDATE_SCREEN_SAVER',
				payload: {
					display1: newState.map((sequence) => ({
						mediaName: sequence.fileName,
						mediaType: sequence.fileType,
						mediaUrl: sequence.fileUrl,
						startTime: sequence.startTime,
						endTime: sequence.endTime,
					})),
				},
			})
		} else if (display === 'display2') {
			dispatch({
				type: 'UPDATE_SCREEN_SAVER',
				payload: {
					display2: newState.map((sequence) => ({
						mediaName: sequence.fileName,
						mediaType: sequence.fileType,
						mediaUrl: sequence.fileUrl,
						startTime: sequence.startTime,
						endTime: sequence.endTime,
					})),
				},
			})
		}
	}

	return (
		<>
			<div
				id="Main-Selection-Component"
				className={`bg-grey-20 px-m font-jiotypemedium rounded-ml  flex-1  overflow-visible text-start transition-all duration-500 ease-in-out ${opened && 'pb-base'}`}>
				<div
					id="Component-Heading"
					className="py-base flex flex-1 cursor-pointer  items-center justify-between "
					onClick={() => setOpened((prev) => !prev)}>
					<p
						className={` text-body-s-bold ${opened ? ' text-orange-60' : 'text-grey-80'}`}>
						Screensaver
					</p>
					<div className="">
						<DropdownIcon
							className={`cursor-pointer transition-all duration-300 ease-in-out ${!opened && 'rotate-180  transform'}`}
						/>
					</div>
				</div>

				{opened && (
					<div className="pt-base space-y-base">
						<div className="py-xxs space-x-xxs text-body-s flex items-center ">
							<div
								onClick={() => setDisplay('display1')}
								className={`py-xs min-w-[208px] cursor-pointer rounded-[1000px] text-center transition-all duration-500  ease-in-out ${display === 'display1' ? 'text-grey-100 bg-orange-50' : 'text-orange-60 bg-transparent'}`}>
								Display 1
							</div>
							<div
								onClick={() => setDisplay('display2')}
								className={`py-xs min-w-[208px] cursor-pointer  rounded-[1000px] text-center transition-all duration-500  ease-in-out ${display === 'display2' ? 'text-grey-100 bg-orange-50' : 'text-orange-60 bg-transparent'}`}>
								Display 2
							</div>
						</div>
						<div className="gap-s grid h-[557px] max-h-[557px] grid-cols-2">
							<div className="bg-blur-50 rounded-ml py-s space-y-base  h-[557px] max-h-[557px]  ">
								<p className="text-body-xs-bold px-s">
									Available screensavers in your device
								</p>

								<div className="scrollbar-none  max-h-[497px] overflow-auto">
									<div
										id="draggble-divs"
										className="gap-base px-s relative grid grid-cols-2 overflow-hidden py-[2px] ">
										{imageList.map(({ imageName, imageUrl }, i) => (
											<ImageTileSS
												dragStart={({ e, url, fileName }) =>
													handleOnDrag(e, url, fileName, 'im')
												}
												key={imageName}
												id={imageName.toString()}
												previewFn={() =>
													setAvailSSPPreviewState({
														availSSPreviewPopupState: true,
														availSSPreviewIndex: i,
														availSSPImagePreviewer: true,
													})
												}
												deleteFn={() => alert('Delete')}
												url={imageUrl}
											/>
										))}
										{videoList.map(({ videoName, videoUrl }, i) => (
											<VideoTileSS
												dragStart={({ e, url, fileName }) =>
													handleOnDrag(e, url, fileName, 'vd')
												}
												key={videoName}
												id={videoName.toString()}
												previewFn={() =>
													setAvailSSPPreviewState({
														availSSPreviewPopupState: true,
														availSSPreviewIndex: i,
														availSSPImagePreviewer: false,
													})
												}
												deleteFn={() => alert('Delete')}
												url={videoUrl}
											/>
										))}
										{linkList.map(({ linkTitle, linkUrl }) => (
											<LinkTileSS
												dragStart={({ e, url, fileName }) =>
													handleOnDrag(e, url, fileName, 'lk')
												}
												key={linkUrl}
												deleteFn={() => alert('Delete')}
												id={linkTitle}
												url={linkUrl}
											/>
										))}
									</div>
								</div>
							</div>
							<div className="bg-background-100/80 rounded-ml py-s space-y-base flex h-[557px] max-h-[557px] flex-col">
								<div className="space-y-base px-s">
									<p className="text-body-xs-bold">Default screensaver</p>
									<div className="space-x-base flex">
										<div
											id="droppable-zone-1"
											onDrop={handleOnDropDefault}
											onDragOver={handleDragOver}
											className="flex-1">
											{defaultScreenSaver &&
											defaultScreenSaver.fileUrl &&
											defaultScreenSaver.fileUrl.length > 0 ? (
												<>
													{defaultScreenSaver.fileType === 'im' && (
														<ImageTileSS
															dragStart={({ e, url, fileName }) =>
																handleOnDrag(e, url, fileName, 'im')
															}
															id="default-screenSaver"
															previewFn={() =>
																setDefaultSSPPreviewState({
																	defaultSSPreviewPopupState: true,
																	defaultSSPreviewIndex: 0,
																	defaultSSPImagePreviewer: true,
																})
															}
															deleteFn={() => alert('Delete')}
															url={defaultScreenSaver.fileUrl}
														/>
													)}

													{defaultScreenSaver.fileType === 'vd' && (
														<VideoTileSS
															dragStart={({ e, url, fileName }) =>
																handleOnDrag(e, url, fileName, 'vd')
															}
															id="default-screenSaver"
															previewFn={() =>
																setDefaultSSPPreviewState({
																	defaultSSPreviewPopupState: true,
																	defaultSSPreviewIndex: 0,
																	defaultSSPImagePreviewer: false,
																})
															}
															deleteFn={() => alert('Delete')}
															url={defaultScreenSaver.fileUrl}
														/>
													)}

													{defaultScreenSaver.fileType === 'lk' && (
														<LinkTileSS
															dragStart={({ e, url, fileName }) =>
																handleOnDrag(e, url, fileName, 'lk')
															}
															id="default-screenSaver"
															deleteFn={() => alert('Delete')}
															url={defaultScreenSaver.fileUrl}
														/>
													)}
												</>
											) : (
												<div className="bg-grey-20 flex h-full min-h-[155px] w-full items-center justify-center rounded-md">
													<div className="space-y-xs flex flex-col items-center">
														<ImageIcon height="24" width="24" color="#5A5A5A" />
														<p className="text-grey-60 text-body-xxs">
															No default image added
														</p>
													</div>
												</div>
											)}
										</div>

										<div className="space-x-xs flex flex-1">
											<div className="mt-[2px]">
												<ExclamationIcon />
											</div>
											<div className="space-y-xs ">
												<p className="text-body-xxs text-grey-80">
													If no screensaver is configured, the default display
													will be shown. When the scheduled duration for Display
													1 or Display 2 has elapsed, the system will switch
													back to the default display.
												</p>
												<p className="text-body-xxs text-grey-60">
													Drag & Drop Image, Video or Link from available
													screensavers
												</p>
											</div>
										</div>
									</div>
								</div>
								<div className="px-s w-full">
									<div className="h-xxs bg-grey-20  w-full shrink-0" />
								</div>

								<div className="space-y-base flex flex-1 flex-col">
									<p className="text-body-xs-bold text-grey-80 px-s">
										Screensaver sequence & duration
									</p>
									<div
										onDrop={handleOnDropSequence}
										ref={sequenceSectionRef}
										onDragOver={handleDragOver}
										className="scrollbar-thin ml-s mr-xxs  pr-xxs scrollbar-thumb-rounded-pill scrollbar-thumb-grey-100/[0.15] max-h-[270px] flex-1 overflow-y-auto overflow-x-hidden ">
										{sequenceScreenSavers.length > 0 ? (
											<div className="gap-base grid grid-cols-2 p-[2px]">
												{sequenceScreenSavers.map((fileData, i) => (
													<SequenceTileSS
														fileData={fileData}
														key={i}
														sequenceNo={i}
														updateDateTime={updateSequenceTime}
													/>
												))}
											</div>
										) : (
											<div className="flex h-full w-full items-center justify-center">
												<div className="space-y-xs flex max-w-[186px] flex-col items-center">
													<ComputerIcon />
													<p className="text-body-xxs text-grey-60 text-center">
														Drag & Drop Image, Video or Link from available
														screensavers
													</p>
												</div>
											</div>
										)}
									</div>
								</div>
							</div>
						</div>
					</div>
				)}
			</div>
			{availSSPreviewPopupState && (
				<PreviewerDS
					previewIndex={availSSPreviewIndex}
					imagePreviewer={availSSPImagePreviewer}
					closeFn={() =>
						setAvailSSPPreviewState({
							availSSPreviewPopupState: false,
							availSSPreviewIndex: 0,
							availSSPImagePreviewer: true,
						})
					}
					imageList={imageList}
					videoList={videoList}
				/>
			)}
			{defaultSSPreviewPopupState && (
				<PreviewerDS
					previewIndex={defaultSSPreviewIndex}
					imagePreviewer={defaultSSPImagePreviewer}
					closeFn={() =>
						setDefaultSSPPreviewState({
							defaultSSPreviewPopupState: false,
							defaultSSPreviewIndex: 0,
							defaultSSPImagePreviewer: true,
						})
					}
					imageList={
						defaultSSPImagePreviewer
							? [
									{
										fileSize: defaultScreenSaver.fileSize,
										imageName: defaultScreenSaver.fileName,
										imageUrl: defaultScreenSaver.fileUrl,
									},
								]
							: []
					}
					videoList={
						defaultSSPImagePreviewer
							? []
							: [
									{
										fileSize: defaultScreenSaver.fileSize,
										videoName: defaultScreenSaver.fileName,
										videoUrl: defaultScreenSaver.fileUrl,
									},
								]
					}
				/>
			)}
		</>
	)
}
