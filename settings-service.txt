import {
	SettingsBulkConfig,
	SettingsConfig,
	SettingsPayloadConfig,
} from 'src/interfaces'
import { apiEndpoints } from 'src/services'
import { jioRoomAxios } from 'src/services/axios-service'
import { getTenantQueryParam } from 'src/utils'

export const fetchAllRoomControllers = async (hubId: string) =>
	await jioRoomAxios.get(
		`${apiEndpoints().getAllControllers}/${hubId}?${getTenantQueryParam()}`,
	)

export const deleteRoomController = async (_id: string, hubId: string) =>
	await jioRoomAxios.delete(
		`${apiEndpoints().deleteController}?${getTenantQueryParam()}`,
		{
			data: {
				controllerId: _id,
				hubDeviceId: hubId,
			},
		},
	)

export const updateAuthorizedRoomController = async (
	_id: string,
	isauthorised: boolean,
	hubId: string,
) =>
	await jioRoomAxios.put(
		`${apiEndpoints().updateControllerState}?${getTenantQueryParam()}`,
		{
			controllerId: _id,
			isAuthorised: isauthorised,
			hubDeviceId: hubId,
		},
	)

export const fetchAllSettingsConfig = async (hubId: string) =>
	await jioRoomAxios.get(
		`${apiEndpoints().devicesettings}/${hubId}?${getTenantQueryParam()}`,
	)

export const updateSettingsConfigAPI = async (
	hubId: string,
	settingsData: SettingsPayloadConfig,
) => {
	const payload: SettingsConfig = {
		deviceId: hubId,
		general: settingsData.general,
		accessPoint: settingsData.accessPoint,
		network: settingsData.network,
		device: settingsData.device,
		maintenance: settingsData.maintenance,
		security: settingsData.security,
		apps: settingsData.apps,
		display: settingsData.display,
		powerOptions: settingsData.powerOptions,
		screenSaver: settingsData.screenSaver,
		conCurrentKey: settingsData.conCurrentKey,
	}

	await jioRoomAxios.post(
		`${apiEndpoints().devicesettings}?${getTenantQueryParam()}`,
		payload,
	)
}

export const updateBulkSettingsConfigAPI = async (
	hubIds: string[],
	settingsData: SettingsPayloadConfig,
) => {
	const payload: SettingsBulkConfig = {
		general: {
			timezone: settingsData.general.timezone,
			showDefaultScreenSaver: settingsData.general.showDefaultScreenSaver,
			airServer: settingsData.general.airServer,
			alwaysShowIP: settingsData.general.alwaysShowIP,
			displayTimeIn24HourFormat: settingsData.general.displayTimeIn24HourFormat,
		},
		accessPoint: {
			enableAccessPoint: settingsData.accessPoint.enableAccessPoint,
			WAN: settingsData.accessPoint.WAN,
		},
		network: settingsData.network,
		device: settingsData.device,
		maintenance: settingsData.maintenance,
		security: {
			enableCalendarDescription:
				settingsData.security.enableCalendarDescription,
			showHomeScreenCalendar: settingsData.security.showHomeScreenCalendar,
			enableMeetingRemainders: settingsData.security.enableMeetingRemainders,
			enablePromptForWeblink: settingsData.security.enablePromptForWeblink,
			showStatusBar: settingsData.security.showStatusBar,
			hideJoinInfoOnNonScheduledMeeting:
				settingsData.security.hideJoinInfoOnNonScheduledMeeting,
			showFileExplorer: settingsData.security.showFileExplorer,
		},
		apps: settingsData.apps,
		display: settingsData.display,
		powerOptions: settingsData.powerOptions,
	}

	await jioRoomAxios.post(
		`${apiEndpoints().bulkupdateSettings}?${getTenantQueryParam()}`,
		{
			deviceIds: hubIds,
			bulkSettings: payload,
		},
	)
}
